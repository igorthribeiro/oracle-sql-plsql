SELECT CONSTRAINT_NAME, SEARCH_CONDITION, STATUS,
       DEFERRABLE, DEFERRED
  FROM USER_CONSTRAINTS
 WHERE TABLE_NAME = 'CURSO';
 
DESC CURSO;

INSERT INTO CURSO VALUES (98100, 'SAP II', SYSDATE, SYSDATE);

ALTER TABLE CURSO DROP CONSTRAINT CK_DATA;

ALTER TABLE CURSO ADD CONSTRAINT CK_DATA CHECK (DAT_FIM > DAT_INICIO)
                      DEFERRABLE INITIALLY IMMEDIATE;
                      
COMMIT;

SET CONSTRAINT ALL DEFERRED;   

DESC ALUNO;

INSERT INTO ALUNO VALUES (155, 'MAT0155', 'LUIZ HENRIQUE', SYSDATE, DEFAULT,
                          17, 'luiz.h@gmail.com', 97000);
COMMIT;

ALTER TABLE ALUNO ENABLE NOVALIDATE CONSTRAINT CK_MAIOR;

--GTT

CREATE GLOBAL TEMPORARY TABLE ECOMMERCE (
     COD_COMPRA NUMBER(10) CONSTRAINT PK_ECOMMERCE PRIMARY KEY,
     NOM_CLIENTE VARCHAR2(30 CHAR))
     ON COMMIT DELETE ROWS; --PRESERVE ROWS;
     
INSERT INTO ECOMMERCE VALUES (1, 'LUCIANO BARROS');     
INSERT INTO ECOMMERCE VALUES (2, 'VICTOR HUGO');     
INSERT INTO ECOMMERCE VALUES (3, 'THIAGO VIEIRA');     
INSERT INTO ECOMMERCE VALUES (4, 'TAIS SILVA');     

SELECT * FROM ECOMMERCE;


DROP TABLE ORAEMP;
CREATE TABLE ORAEMP(
    FIRST_NAME CHAR(20),
    LAST_NAME  CHAR(20),
    CITY       CHAR(20),
    SALARY     CHAR(20))
ORGANIZATION EXTERNAL (TYPE ORACLE_LOADER DEFAULT
   DIRECTORY DP ACCESS PARAMETERS (RECORDS DELIMITED BY NEWLINE SKIP 1                            
                                   FIELDS TERMINATED BY ',' (
                                       FIRST_NAME CHAR(20),
                                       LAST_NAME  CHAR(20),
                                       CITY       CHAR(20),
                                       SALARY     CHAR(20)))
  LOCATION('ORAEMP.CSV'));

SELECT * FROM ORAEMP;

CREATE TABLE EMP60 AS
   SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = 60;

SELECT * FROM EMP60;

--DROP
DROP TABLE EMP60 PURGE;

SELECT * FROM RECYCLEBIN;

FLASHBACK TABLE EMP60 TO BEFORE DROP;

PURGE RECYCLEBIN;

--SUBQUERY

SELECT FIRST_NAME, DEPARTMENT_ID, SALARY
  FROM EMPLOYEES
 WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEES); --8775,4
 
SELECT FIRST_NAME, DEPARTMENT_ID, SALARY
  FROM EMPLOYEES
 WHERE (DEPARTMENT_ID, SALARY) IN (SELECT DEPARTMENT_ID, MIN(SALARY)
                                   FROM EMPLOYEES GROUP BY DEPARTMENT_ID);

SELECT FIRST_NAME, DEPARTMENT_ID, SALARY
  FROM EMPLOYEES EXTE
 WHERE SALARY = (SELECT MIN(SALARY)
                   FROM EMPLOYEES INTE
                  WHERE EXTE.DEPARTMENT_ID = INTE.DEPARTMENT_ID);
                  
--GANHA MAIS QUE A MÉIDA DO DEPARTAMENTO

SELECT FIRST_NAME, DEPARTMENT_ID, SALARY
  FROM EMPLOYEES EXTE
 WHERE SALARY > (SELECT AVG(SALARY)
                   FROM EMPLOYEES INTE
                  WHERE EXTE.DEPARTMENT_ID = INTE.DEPARTMENT_ID);
                  
-- QUANTOS ENTRARAM DEPOIS DE MIM?                  
-- EMPLOYEE_ID, HIRE_DATE, QUANTIDADE
SELECT EMPLOYEE_ID, HIRE_DATE, (SELECT COUNT(*)
                                  FROM EMPLOYEES I
                                 WHERE I.HIRE_DATE > E.HIRE_DATE) ENTROU_DEPOIS
  FROM EMPLOYEES E;

-- EU GANHO MAIS QUE QUANTAS PESSOAS NO MEU DEPARTAMENTO?
-- EMPLOYEE_ID, DEPARTMENT_ID, FIRST_NAME, SALARY, QTD.
SELECT EMPLOYEE_ID, DEPARTMENT_ID,
       FIRST_NAME, SALARY, (SELECT COUNT(*)
                            FROM EMPLOYEES I
                            WHERE E.SALARY > I.SALARY
                              AND E.DEPARTMENT_ID = I.DEPARTMENT_ID) "GANHO+"
  FROM EMPLOYEES E;
  
  
--QUAIS FUNCIONÁRIOS SÃO GERENTES? ID, FIRST_NAME

SELECT EMPLOYEE_ID, FIRST_NAME
  FROM EMPLOYEES E
WHERE NOT EXISTS (SELECT NULL
             FROM EMPLOYEES I
            WHERE E.EMPLOYEE_ID = I.MANAGER_ID); 

                  













