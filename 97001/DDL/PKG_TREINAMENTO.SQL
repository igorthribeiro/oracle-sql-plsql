create or replace PACKAGE PKG_TREINAMENTO IS
   V_SUCESSO VARCHAR2(4000 CHAR);
   CURSOR C_NOTAS_ALUNOS IS SELECT NM_NOME, NM_MATRICULA, NN_NOTA1, NN_NOTA2,
                                   NN_NOTA3, NN_NOTA4, NN_MEDIA
                              FROM ALUNO NATURAL JOIN NOTAS;
   TYPE T_BOLETIM IS TABLE OF C_NOTAS_ALUNOS%ROWTYPE;
   V_BOLETIM T_BOLETIM;
                                 
   PROCEDURE SP_INSERE_ALUNO(P_NM_NOME ALUNO.NM_NOME%TYPE,
                             P_DS_EMAIL ALUNO.DS_EMAIL%TYPE);
                             
   --INSERIR NUMERO DO SEMESTRE 012019, 022019
   --INSERIR USANDO O NÚMERO DA MATRÍCULA
   PROCEDURE SP_INSERE_NOTAS(P_CD_ALUNO NOTAS.CD_ALUNO%TYPE,
                             P_NN_NOTA1 NOTAS.NN_NOTA1%TYPE := 0,
                             P_NN_NOTA2 NOTAS.NN_NOTA2%TYPE := 0,
                             P_NN_NOTA3 NOTAS.NN_NOTA3%TYPE := 0,
                             P_NN_NOTA4 NOTAS.NN_NOTA4%TYPE := 0);

   FUNCTION FC_VALIDA_EMAIL(P_EMAIL VARCHAR2) RETURN BOOLEAN;
   
   FUNCTION FC_CALCULA_MEDIA(P_NN_NOTA1 NOTAS.NN_NOTA1%TYPE,
                             P_NN_NOTA2 NOTAS.NN_NOTA2%TYPE,
                             P_NN_NOTA3 NOTAS.NN_NOTA3%TYPE,
                             P_NN_NOTA4 NOTAS.NN_NOTA4%TYPE)
                             RETURN NOTAS.NN_MEDIA%TYPE;

   FUNCTION FC_CALCULA_MEDIA(P_CD_ALUNO ALUNO.CD_ALUNO%TYPE)
                             RETURN NOTAS.NN_MEDIA%TYPE;
                             
   PROCEDURE SP_GERA_BOLETIM;
   
END PKG_TREINAMENTO;
/
create or replace PACKAGE BODY PKG_TREINAMENTO IS
    FUNCTION FC_VALIDA_EMAIL(P_EMAIL VARCHAR2) RETURN BOOLEAN
    IS
    BEGIN
       RETURN P_EMAIL IS NOT NULL AND LENGTH(P_EMAIL) > 0
          AND INSTR(P_EMAIL, '@') != 0
          AND LOWER(P_EMAIL) = P_EMAIL;
    END FC_VALIDA_EMAIL;

    FUNCTION FC_GERA_MATRICULA (P_COD_ALUNO ALUNO.CD_ALUNO%TYPE)
          RETURN ALUNO.NM_MATRICULA%TYPE
    IS
    BEGIN
       RETURN 'MAT'||LPAD(P_COD_ALUNO,4,0);
    END FC_GERA_MATRICULA;

    PROCEDURE SP_INSERE_ALUNO(P_NM_NOME ALUNO.NM_NOME%TYPE,
                                     P_DS_EMAIL ALUNO.DS_EMAIL%TYPE)
    IS
       E_EMAIL_INVALIDO EXCEPTION;
       V_CD_ALUNO ALUNO.CD_ALUNO%TYPE;
       V_NM_MATRICULA ALUNO.NM_MATRICULA%TYPE;
    BEGIN
       IF NOT FC_VALIDA_EMAIL(P_DS_EMAIL) THEN
          RAISE E_EMAIL_INVALIDO;
       END IF;
       --PEGAR O CÓDIGO
       V_CD_ALUNO := SQ_CD_ALUNO.NEXTVAL;
       --GERA O NÚMERO DA MATRICULA
       V_NM_MATRICULA := FC_GERA_MATRICULA(V_CD_ALUNO);

       INSERT INTO ALUNO (CD_ALUNO, NM_MATRICULA, NM_NOME, DS_EMAIL)
              VALUES(V_CD_ALUNO, V_NM_MATRICULA, P_NM_NOME, P_DS_EMAIL);
       V_SUCESSO := 'ALUNO INSERIDO COM SUCESSO!';

       EXCEPTION 
          WHEN E_EMAIL_INVALIDO THEN
             V_SUCESSO := 'E-MAIL INVÁLIDO!';
          WHEN OTHERS THEN
             V_SUCESSO := 'ERRO DESCONHECIDO. FALE COM O SUPORTE! - ' || SQLERRM;
    END SP_INSERE_ALUNO;
    
    PROCEDURE SP_INSERE_NOTAS(P_CD_ALUNO NOTAS.CD_ALUNO%TYPE,
                                 P_NN_NOTA1 NOTAS.NN_NOTA1%TYPE := 0,
                                 P_NN_NOTA2 NOTAS.NN_NOTA2%TYPE := 0,
                                 P_NN_NOTA3 NOTAS.NN_NOTA3%TYPE := 0,
                                 P_NN_NOTA4 NOTAS.NN_NOTA4%TYPE := 0)
   IS
      E_ALUNO_INEXISTENTE EXCEPTION;
      V_CONT_ALUNO PLS_INTEGER;
      V_SQ_CD_NOTA NOTAS.CD_NOTA%TYPE;
   BEGIN
      SELECT COUNT(*) INTO V_CONT_ALUNO
        FROM ALUNO
       WHERE CD_ALUNO = P_CD_ALUNO;
      
      IF V_CONT_ALUNO != 1 THEN
         RAISE E_ALUNO_INEXISTENTE;
      END IF;
      
      V_SQ_CD_NOTA := SQ_CD_NOTA.NEXTVAL;
      
      INSERT INTO NOTAS(CD_NOTA, CD_ALUNO, NN_NOTA1, NN_NOTA2, NN_NOTA3, NN_NOTA4)
             VALUES (V_SQ_CD_NOTA, P_CD_ALUNO, P_NN_NOTA1, P_NN_NOTA2, P_NN_NOTA3, P_NN_NOTA4);
      V_SUCESSO := 'NOTAS INSERIDAS COM SUCESSO!';
      
      EXCEPTION 
         WHEN E_ALUNO_INEXISTENTE THEN
            V_SUCESSO := 'CÓDIGO DE ALUNO NÃO LOCALIZADO!';
         WHEN OTHERS THEN
            V_SUCESSO := 'ERRO DESCONHECIDO: '||SQLERRM;
        
   END SP_INSERE_NOTAS;

   FUNCTION FC_CALCULA_MEDIA(P_NN_NOTA1 NOTAS.NN_NOTA1%TYPE,
                                 P_NN_NOTA2 NOTAS.NN_NOTA2%TYPE,
                                 P_NN_NOTA3 NOTAS.NN_NOTA3%TYPE,
                                 P_NN_NOTA4 NOTAS.NN_NOTA4%TYPE)
                                 RETURN NOTAS.NN_MEDIA%TYPE
   IS
      V_NN_MEDIA NOTAS.NN_MEDIA%TYPE;
   BEGIN
      V_NN_MEDIA := (P_NN_NOTA1 + P_NN_NOTA2 + P_NN_NOTA3 + P_NN_NOTA4) / 4;
      RETURN V_NN_MEDIA;
   END FC_CALCULA_MEDIA;

   FUNCTION FC_CALCULA_MEDIA(P_CD_ALUNO ALUNO.CD_ALUNO%TYPE)
                                RETURN NOTAS.NN_MEDIA%TYPE
   IS
      V_NN_NOTA1 NUMBER;
      V_NN_NOTA2 NUMBER;
      V_NN_NOTA3 NUMBER;
      V_NN_NOTA4 NUMBER;
   BEGIN
      SELECT NN_NOTA1, NN_NOTA2, NN_NOTA3, NN_NOTA4 
        INTO V_NN_NOTA1, V_NN_NOTA2, V_NN_NOTA3, V_NN_NOTA4 
        FROM NOTAS NEX
       WHERE CD_NOTA = (SELECT MAX(CD_NOTA)
                          FROM NOTAS NIN
                         WHERE NIN.CD_ALUNO = NEX.CD_ALUNO)
         AND CD_ALUNO = P_CD_ALUNO;  
         
       RETURN FC_CALCULA_MEDIA(V_NN_NOTA1, V_NN_NOTA2, V_NN_NOTA3, V_NN_NOTA4);       
   END FC_CALCULA_MEDIA;
   
   PROCEDURE SP_CARREGA_BOLETIM IS
   BEGIN
      IF NOT C_NOTAS_ALUNOS%ISOPEN THEN
         OPEN C_NOTAS_ALUNOS;
      END IF;         
      FETCH C_NOTAS_ALUNOS BULK COLLECT INTO V_BOLETIM;
      CLOSE C_NOTAS_ALUNOS;
   END SP_CARREGA_BOLETIM;
   
   PROCEDURE SP_GERA_BOLETIM
   IS
      F UTL_FILE.FILE_TYPE;
      V_NOME_ARQ VARCHAR2(50 CHAR);
   BEGIN
      --SELECT REGEXP_REPLACE(201902, '([[:digit:]]{4})([[:digit:]]{2})','\2 - \1') SEMESTRE FROM DUAL;
      V_NOME_ARQ := 'BOLETIM_'||LPAD(SQ_NOME_ARQUIVO.NEXTVAL,5,0);
      F := UTL_FILE.FOPEN('REL_BOLETIM', V_NOME_ARQ, 'A');
      UTL_FILE.PUT_LINE(F, 'BOLETIM DOS ALUNOS PL/SQL KA 97001');
      UTL_FILE.PUT_LINE(F, '-------------------------------------------------------------------------');
      UTL_FILE.PUT_LINE(F, 'DATA DA GERAÇÃO: '||TO_CHAR(SYSDATE, 'fmDD/MM/YYYY - HH24:MI:SS'));
      UTL_FILE.NEW_LINE(F);
      FOR I IN V_BOLETIM.FIRST..V_BOLETIM.LAST LOOP
         UTL_FILE.PUT_LINE(F, 'ALUNO: '||V_BOLETIM(I).NM_NOME||' - MATRICULA: '||V_BOLETIM(I).NM_MATRICULA);
         UTL_FILE.PUT_LINE(F, 'NOTAS: '||'['||LPAD(V_BOLETIM(I).NN_NOTA1,4,' ')||']'
                                       ||'['||LPAD(V_BOLETIM(I).NN_NOTA2,4,' ')||']'
                                       ||'['||LPAD(V_BOLETIM(I).NN_NOTA3,4,' ')||']'
                                       ||'['||LPAD(V_BOLETIM(I).NN_NOTA4,4,' ')||']');
         UTL_FILE.PUT_LINE(F, 'MÉDIA FINAL: '||V_BOLETIM(I).NN_MEDIA);
         UTL_FILE.NEW_LINE(F);
      END LOOP;         
      UTL_FILE.PUT_LINE(F, '-------------------------------------------------------------------------');
      UTL_FILE.FCLOSE(F);         

   END SP_GERA_BOLETIM;

   BEGIN
      SP_CARREGA_BOLETIM;
END PKG_TREINAMENTO ;